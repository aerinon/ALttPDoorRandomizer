# workflow name
name: Build

# fire on
on:
  [push,pull_request]

# stuff to do
jobs:
  # Diagnostics
  diags:
    name: 🧮Diagnostics
    runs-on: ${{ matrix.os-name }}
    continue-on-error: True

    strategy:
      matrix:
        os-name: [
          # ubuntu-latest,  # ubuntu-22.04
          ubuntu-22.04,
          ubuntu-20.04,
          macos-latest,  # macos-12
          windows-latest # windows-2022
        ]
        python-version: [
          "3.12"
        ]
    steps:
      # checkout commit
      - name: ✔️Checkout commit
        uses: actions/checkout@v4.1.4
      # install python
      - name: 💿Install Python
        uses: actions/setup-python@v5.1.0
        with:
          python-version: ${{ matrix.python-version }}
      # python version
      - name: 🐍Python Version
        shell: bash
        run: |
          python --version
      # install
      - name: 💿Call Install
        uses: ./.github/actions/install
        with:
          calling-job: diags
          os-name: ${{ matrix.os-name }}
          python-version: ${{ matrix.python-version }}
      # Analyze used GitHub Actions
      - name: Analyze used GitHub Actions
        shell: bash
        run: |
          python ./resources/ci/common/list_actions.py
      # Diagnostics
      - name: 🧮Print Diagnostics
        shell: bash
        run: |
          python -m pip install setuptools
          python -m source.meta.run_diags

  # Install/Test
  install-test:
    name: 💿/⏱️
    runs-on: ${{ matrix.os-name }}
    continue-on-error: False

    strategy:
      matrix:
        os-name: [
          # ubuntu-latest,  # ubuntu-22.04
          ubuntu-22.04,
          ubuntu-20.04,
          macos-latest,  # macos-12
          windows-latest # windows-2022
        ]
        python-version: [
          "3.12"
        ]
    steps:
      # checkout commit
      - name: ✔️Checkout commit
        uses: actions/checkout@v4.1.4
      # install
      - name: 💿Call Install
        uses: ./.github/actions/install
        with:
          calling-job: test
          os-name: ${{ matrix.os-name }}
          python-version: ${{ matrix.python-version }}
      - name: ⏱️Call Test
        uses: ./.github/actions/test
        with:
          os-name: ${{ matrix.os-name }}
          python-version: ${{ matrix.python-version }}
  # Install/Build
  install-build:
    name: 💿/🔨
    runs-on: ${{ matrix.os-name }}
    needs: [install-test]
    continue-on-error: False

    strategy:
      matrix:
        os-name: [
          # ubuntu-latest,  # ubuntu-22.04
          ubuntu-22.04,
          ubuntu-20.04,
          macos-latest,  # macos-12
          windows-latest # windows-2022
        ]
        python-version: [
          "3.12"
        ]
    steps:
      # checkout commit
      - name: ✔️Checkout commit
        uses: actions/checkout@v4.1.4
      # install
      - name: 💿Call Install
        uses: ./.github/actions/install
        with:
          calling-job: build
          os-name: ${{ matrix.os-name }}
          python-version: ${{ matrix.python-version }}
      # build
      - name: 🔨Call Build
        uses: ./.github/actions/build
        with:
          calling-job: build
          os-name: ${{ matrix.os-name }}
          python-version: ${{ matrix.python-version }}

  # Install/Prepare Release
  install-release-prepare:
    name: 💿/📀->📦
    runs-on: ${{ matrix.os-name }}
    needs: [install-build]

    strategy:
      matrix:
        os-name: [
          # ubuntu-latest,  # ubuntu-22.04
          ubuntu-22.04,
          ubuntu-20.04,
          macos-latest,  # macos-12
          windows-latest # windows-2022
        ]
        python-version: [
          "3.12"
        ]
    steps:
      # checkout commit
      - name: ✔️Checkout commit
        uses: actions/checkout@v4.1.4
      # install
      - name: 💿Call Install
        uses: ./.github/actions/install
        with:
          calling-job: release
          os-name: ${{ matrix.os-name }}
          python-version: ${{ matrix.python-version }}
      # install dependencies via pip
      - name: 💿Install Dependencies via pip
        shell: bash
        run: |
          python -m pip install setuptools
      # prepare release
      - name: 📀->📦Prepare Release
        uses: ./.github/actions/release-prepare
        with:
          os-name: ${{ matrix.os-name }}
          python-version: ${{ matrix.python-version }}

  # Deploy Release
  release-deploy:
    name: 📀->🚀
    runs-on: ${{ matrix.os-name }}
    needs: [install-release-prepare]

    strategy:
      matrix:
        # should run on latest explicit ubuntu version
        os-name: [
          # ubuntu-latest,  # ubuntu-22.04
          ubuntu-22.04,
        ]
        python-version: [
          "3.12"
        ]

    steps:
      # checkout commit
      - name: ✔️Checkout commit
        uses: actions/checkout@v4.1.4

      # install dependencies via pip
      - name: 💿Install Dependencies via pip
        shell: bash
        run: |
          python -m pip install pytz requests

      # get parent dir
      - name: 📁Get Parent Directory
        id: parentDir
        uses: ./.github/actions/get-parent-dir

      # download appversion artifact
      - name: 🔽Download AppVersion Artifact
        uses: actions/download-artifact@v4.1.7
        with:
          name: appversion-build-${{ matrix.os-name }}-py${{ matrix.python-version }}
          path: ${{ steps.parentDir.outputs.parentDir }}/build

      # download ubuntu archive artifact
      - name: 🔽Download Ubuntu Archive Artifact
        uses: actions/download-artifact@v4.1.7
        with:
          # should run on latest explicit ubuntu version
          name: archive-ubuntu-22.04-py${{ matrix.python-version }}
          path: ${{ steps.parentDir.outputs.parentDir }}/deploy/linux

      # download macos archive artifact
      - name: 🔽Download MacOS Archive Artifact
        uses: actions/download-artifact@v4.1.7
        with:
          name: archive-macos-latest-py${{ matrix.python-version }}
          path: ${{ steps.parentDir.outputs.parentDir }}/deploy/macos

      # download windows archive artifact
      - name: 🔽Download Windows Archive Artifact
        uses: actions/download-artifact@v4.1.7
        with:
          name: archive-windows-latest-py${{ matrix.python-version }}
          path: ${{ steps.parentDir.outputs.parentDir }}/deploy/windows

      # archive listing
      # - name: Archive Listing
      #   shell: bash
      #   run: |
      #     ls -R ${{ steps.parentDir.outputs.parentDir }}/deploy/

      # debug info
      - name: 📝Debug Info
        id: debug_info
        run: |
          GITHUB_TAG="$(head -n 1 ../build/app_version.txt)"
          echo "github_tag=$GITHUB_TAG" >> $GITHUB_OUTPUT
          GITHUB_TAG="v${GITHUB_TAG}"
          RELEASE_NAME="ALttPDoorRandomizer ${GITHUB_TAG}"
          echo "Release Name: ${RELEASE_NAME}"
          echo "Git Tag:      ${GITHUB_TAG}"

      # create a release
      - name: 📀->🚀Create a Release (MASTER)
        id: create_release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.debug_info.outputs.github_tag }}
          release_name: ALttPDoorRandomizer v${{ steps.debug_info.outputs.github_tag }}
          body_path: RELEASENOTES.md
          # draft: true
        if: contains(github.ref, 'master')

      # determine linux archive asset
      - name: ❔Identify Linux Archive Asset
        id: identify-linux-asset
        shell: bash
        run: |
          ASSET_LINUX="$(ls ${{ steps.parentDir.outputs.parentDir }}/deploy/linux)"
          echo "asset_linux=$ASSET_LINUX" >> $GITHUB_OUTPUT

      # upload linux archive asset
      - name: 🔼Upload Linux Archive Asset (MASTER)
        id: upload-linux-asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.parentDir.outputs.parentDir }}/deploy/linux/${{ steps.identify-linux-asset.outputs.asset_linux }}
          asset_name: ALttPDoorRandomizer-${{ steps.debug_info.outputs.github_tag }}-linux-focal.tar.gz
          asset_content_type: application/gzip
        if: contains(github.ref, 'master')

      # determine macos archive asset
      - name: ❔Identify MacOS Archive Asset
        id: identify-macos-asset
        shell: bash
        run: |
          ASSET_MACOS="$(ls ${{ steps.parentDir.outputs.parentDir }}/deploy/macos)"
          echo "asset_macos=$ASSET_MACOS" >> $GITHUB_OUTPUT

      # upload macos archive asset
      - name: 🔼Upload MacOS Archive Asset (MASTER)
        id: upload-macos-asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.parentDir.outputs.parentDir }}/deploy/macos/${{ steps.identify-macos-asset.outputs.asset_macos }}
          asset_name: ALttPDoorRandomizer-${{ steps.debug_info.outputs.github_tag }}-osx.tar.gz
          asset_content_type: application/gzip
        if: contains(github.ref, 'master')

      # determine windows archive asset
      - name: ❔Identify Windows Archive Asset
        id: identify-windows-asset
        shell: bash
        run: |
          ASSET_WIN="$(ls ${{ steps.parentDir.outputs.parentDir }}/deploy/windows)"
          echo "asset_windows=$ASSET_WIN" >> $GITHUB_OUTPUT

      # upload windows archive asset
      - name: 🔼Upload Windows Archive Asset (MASTER)
        id: upload-windows-asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.parentDir.outputs.parentDir }}/deploy/windows/${{ steps.identify-windows-asset.outputs.asset_windows }}
          asset_name: ALttPDoorRandomizer-${{ steps.debug_info.outputs.github_tag }}-windows.zip
          asset_content_type: application/zip
        if: contains(github.ref, 'master')
