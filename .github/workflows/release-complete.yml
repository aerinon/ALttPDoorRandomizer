# workflow name
name: 🏷️Tag Repositories

# fire on
on: [
  push,   # FIXME: for testing, not for production
  release
]

jobs:
  tag-repos:
    name: 🏷️Tag Repositories
    runs-on: ${{ matrix.os-name }}

    strategy:
      matrix:
        # CHECKME: OS List to run on
        os-name: [
          # ubuntu-latest,  # ubuntu-22.04
          ubuntu-22.04
        ]
    steps:
      # Tag baserom
      - name: 🖳Tag baserom
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.ALTTPER_TAGGER }}
          script: |
            const inboundTag = 'TAG';
            const repo = 'z3randomizer';  // repo to tag
            const ref = 'heads/OWMain';   // ref to tag

            // get latest commit
            const latestCommit = await github.rest.git.getRef({
              owner: context.repo.owner,
              repo: repo,
              ref: ref
            })
            // get latest refs
            const latestRefs = await github.rest.git.listMatchingRefs({
              owner: context.repo.owner,
              repo: repo
            })
            let latestTag = ''; // bucket for latest tag
            // get last tag in data
            for(let thisRef of latestRefs.data) {
              if(thisRef['ref'].indexOf('tags') > -1) {
                let refParts = thisRef['ref'].split('/');
                latestTag = refParts[-1];
              }
            }
            console.log('Repo:      ', repo)
            console.log('Ref:       ', ref)
            console.log('Git tag:   ', inboundTag)
            console.log('Latest tag:', latestTag)
            if(latestTag != inboundTag) {
              console.log(`Result:    🟢Creating '${inboundTag}' tag`)
              /*
              github.rest.git.createRef({
                owner: context.repo.owner,
                repo: repo,
                ref: 'refs/tags/' + inboundTag,
                sha: latestCommit.data.object.sha
              })
              */
            } else {
              console.log('Result:    🟡Not creating release tag')
            }

      # Tag Unstable
      - name: 🛠️Tag Unstable
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.ALTTPER_TAGGER }}
          script: |
            const inboundTag = 'TAG';
            const repo = 'ALttPDoorRandomizer';       // repo to tag
            const ref = 'heads/OverworldShuffleDev';  // ref to tag

            // get latest commit
            const latestCommit = await github.rest.git.getRef({
              owner: context.repo.owner,
              repo: repo,
              ref: ref
            })
            // get latest refs
            const latestRefs = await github.rest.git.listMatchingRefs({
              owner: context.repo.owner,
              repo: repo
            })
            let latestTag = ''; // bucket for latest tag
            // get last tag in data
            for(let thisRef of latestRefs.data) {
              if(thisRef['ref'].indexOf('tags') > -1) {
                let refParts = thisRef['ref'].split('/');
                latestTag = refParts[-1];
              }
            }
            console.log('Repo:      ', repo)
            console.log('Ref:       ', ref)
            console.log('Git tag:   ', inboundTag)
            console.log('Latest tag:', latestTag)
            if(latestTag != inboundTag) {
              console.log(`Result:    🟢Creating '${inboundTag}' tag`)
              /*
              github.rest.git.createRef({
                owner: context.repo.owner,
                repo: repo,
                ref: 'refs/tags/' + inboundTag,
                sha: latestCommit.data.object.sha
              })
              */
            } else {
              console.log('Result:    🟡Not creating release tag')
            }

      # Tag Stable
      - name: ✅Tag Stable
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.ALTTPER_TAGGER }}
          script: |
            const inboundTag = 'TAG';
            const repo = 'ALttPDoorRandomizer';   // repo to tag
            const ref = 'heads/OverworldShuffle'; // ref to tag

            // get latest commit
            const latestCommit = await github.rest.git.getRef({
              owner: context.repo.owner,
              repo: repo,
              ref: ref
            })
            // get latest refs
            const latestRefs = await github.rest.git.listMatchingRefs({
              owner: context.repo.owner,
              repo: repo
            })
            let latestTag = ''; // bucket for latest tag
            // get last tag in data
            for(let thisRef of latestRefs.data) {
              if(thisRef['ref'].indexOf('tags') > -1) {
                let refParts = thisRef['ref'].split('/');
                latestTag = refParts[-1];
              }
            }
            console.log('Repo:      ', repo)
            console.log('Ref:       ', ref)
            console.log('Git tag:   ', inboundTag)
            console.log('Latest tag:', latestTag)
            if(latestTag != inboundTag) {
              console.log(`Result:    🟢Creating '${inboundTag}' tag`)
              /*
              github.rest.git.createRef({
                owner: context.repo.owner,
                repo: repo,
                ref: 'refs/tags/' + inboundTag,
                sha: latestCommit.data.object.sha
              })
              */
            } else {
              console.log('Result:    🟡Not creating release tag')
            }
