name: 📀->🚀Deploy Release
description: Deploy Release
inputs:
  os-name:
    required: true
    description: OS to run on
  python-version:
    required: true
    description: Python version to install

runs:
  using: "composite"
  steps:
      # checkout commit
      - name: ✔️Checkout commit
        uses: actions/checkout@v4.1.4

      # install dependencies via pip
      - name: 💿Install Dependencies via pip
        shell: bash
        run: |
          python -m pip install pytz requests

      # get parent dir
      - name: 📁Get Parent Directory
        id: parentDir
        uses: ./.github/actions/get-parent-dir

      # download appversion artifact
      - name: 🔽Download AppVersion Artifact
        uses: actions/download-artifact@v4.1.7
        with:
          name: appversion-build-${{ matrix.os-name }}-py${{ matrix.python-version }}
          path: ${{ steps.parentDir.outputs.parentDir }}/build

      # download ubuntu archive artifact
      - name: 🔽Download Ubuntu Archive Artifact
        uses: actions/download-artifact@v4.1.7
        with:
          # should run on latest explicit ubuntu version
          name: archive-ubuntu-22.04-py${{ matrix.python-version }}
          path: ${{ steps.parentDir.outputs.parentDir }}/deploy/linux

      # download macos archive artifact
      - name: 🔽Download MacOS Archive Artifact
        uses: actions/download-artifact@v4.1.7
        with:
          name: archive-macos-latest-py${{ matrix.python-version }}
          path: ${{ steps.parentDir.outputs.parentDir }}/deploy/macos

      # download windows archive artifact
      - name: 🔽Download Windows Archive Artifact
        uses: actions/download-artifact@v4.1.7
        with:
          name: archive-windows-latest-py${{ matrix.python-version }}
          path: ${{ steps.parentDir.outputs.parentDir }}/deploy/windows

      # archive listing
      # - name: Archive Listing
      #   shell: bash
      #   run: |
      #     ls -R ${{ steps.parentDir.outputs.parentDir }}/deploy/

      # debug info
      - name: 📝Debug Info
        id: debug_info
        shell: bash
        run: |
          GITHUB_TAG="$(head -n 1 ../build/app_version.txt)"
          echo "github_tag=$GITHUB_TAG" >> $GITHUB_OUTPUT
          RELEASE_NAME="ALttPDoorRandomizer ${GITHUB_TAG}"
          echo "Release Name: ${RELEASE_NAME}"
          echo "Git Tag:      ${GITHUB_TAG}"

      # create a release
      - name: 📀->🚀Create a Release (MASTER)
        id: create_release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.debug_info.outputs.github_tag }}
          release_name: ALttPDoorRandomizer ${{ steps.debug_info.outputs.github_tag }}
          body_path: RELEASENOTES.md
          # draft: true
        if: contains(github.ref, 'master')

      # determine linux archive asset
      - name: ❔Identify Linux Archive Asset
        id: identify-linux-asset
        shell: bash
        run: |
          ASSET_LINUX="$(ls ${{ steps.parentDir.outputs.parentDir }}/deploy/linux)"
          echo "asset_linux=$ASSET_LINUX" >> $GITHUB_OUTPUT

      # upload linux archive asset
      - name: 🔼Upload Linux Archive Asset (MASTER)
        id: upload-linux-asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.parentDir.outputs.parentDir }}/deploy/linux/${{ steps.identify-linux-asset.outputs.asset_linux }}
          asset_name: ALttPDoorRandomizer-${{ steps.debug_info.outputs.github_tag }}-linux-focal.tar.gz
          asset_content_type: application/gzip
        if: contains(github.ref, 'master')

      # determine macos archive asset
      - name: ❔Identify MacOS Archive Asset
        id: identify-macos-asset
        shell: bash
        run: |
          ASSET_MACOS="$(ls ${{ steps.parentDir.outputs.parentDir }}/deploy/macos)"
          echo "asset_macos=$ASSET_MACOS" >> $GITHUB_OUTPUT

      # upload macos archive asset
      - name: 🔼Upload MacOS Archive Asset (MASTER)
        id: upload-macos-asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.parentDir.outputs.parentDir }}/deploy/macos/${{ steps.identify-macos-asset.outputs.asset_macos }}
          asset_name: ALttPDoorRandomizer-${{ steps.debug_info.outputs.github_tag }}-osx.tar.gz
          asset_content_type: application/gzip
        if: contains(github.ref, 'master')

      # determine windows archive asset
      - name: ❔Identify Windows Archive Asset
        id: identify-windows-asset
        shell: bash
        run: |
          ASSET_WIN="$(ls ${{ steps.parentDir.outputs.parentDir }}/deploy/windows)"
          echo "asset_windows=$ASSET_WIN" >> $GITHUB_OUTPUT

      # upload windows archive asset
      - name: 🔼Upload Windows Archive Asset (MASTER)
        id: upload-windows-asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.parentDir.outputs.parentDir }}/deploy/windows/${{ steps.identify-windows-asset.outputs.asset_windows }}
          asset_name: ALttPDoorRandomizer-${{ steps.debug_info.outputs.github_tag }}-windows.zip
          asset_content_type: application/zip
        if: contains(github.ref, 'master')
